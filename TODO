# TODO

1. call repl debugger on fatal error?
2. DONE: string tokenizer for repl and assembler
3. breakpoints!
4. zero things after malloc
5. DONE: implement a symbol table
6. get assembler working in single instruction mode
7. get assembler working in multiple instruction mode
8. load binary program from file, save binary program to file
9. watchpoints (see if the value of an address changes?)
10. finish all integer instructions
11. finish fp instructions
12. comparisons?
13. mmx instructions?
14. all documented repl commands complete and tested?
15. tests -- feed in a repl script that uses the assembler
16. syscall (some can simply pass through to real syscall!)
17. performance measurements
18. implement more performant paged memory
19. make examine smarter (maybe do ASCII conversion on the right hand
    side)
20. make sure we can crash via fuzzing or something?
21. minmal language backend targeting comet-vm
22. compile_x86, compile_riscv, and compile_arm - take *assembly*
    syntax for these architectures and assemble to comet byte codes.


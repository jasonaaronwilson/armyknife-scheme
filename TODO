# TODO

Cleanups that aren't important but help keep the style nice.

* add standalone scheme interpreter target
* add hack to define so we can put a debug name on closures...
* make tags an enum - hopefully allows gdb to display them
  better. probably the same for error codes.
* comparison opcodes
* search for FIXME and TODOs and try to fix any that are easy
* implement some assembler directives like .text and .data .file .line .global?
* print hexidecimal? 2,4,8,16 digits?
* reimplement symbol tables using 'array'
* why not use macros for casts for all types? as_string, etc.
* prefix "reader symbols" with the length and the hashcode.

1. make tagging nicer (inline functions?)
2. change calling convention for primitives so we don't have to cons
3. add type predicates, cons, -, *, /, print and read
4. add debugger commands to env and test executing them
5. code in printer.c should print to a byte buffer.
6. change readlines so that we read enough when expression isn't
   finished.

older

* what to do about _start?

1. implement command line parsing
2. call repl debugger on fatal error?
3. breakpoints!
4. load binary program from file, save binary program to file
5. watchpoints (see if the value of an address changes?)
6. finish all integer instructions
7. finish fp instructions
8. comparisons?
9. mmx instructions?
10. all documented repl commands complete and tested?
11. tests -- these should now be pretty easy to write. each opcode
    should get at least one test
12. syscall (some can simply pass through to real syscall!)
13. performance measurements
14. implement more performant paged memory
15. make examine smarter (maybe do ASCII conversion on the right hand
    side)
16. make sure we can crash via fuzzing or something?
17. minmal language backend targeting comet-vm
18. compile_x86, compile_riscv, and compile_arm - take *assembly*
    syntax for these architectures and assemble to comet byte codes.
19. console mode for the debugger
20. implement a "linker" and a "binary" format using the core-archive
    format (so probably add a C reader and writer library inside
    core-archive first).
